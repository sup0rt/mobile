package Kotlin.island

import java.util.concurrent.*
import kotlin.random.Random
import kotlin.math.min
import kotlin.math.max

// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
abstract class Animal(
    val symbol: String,
    val maxCountPerCell: Int,
    val speed: Int,
    val foodNeeded: Double
) {
    var satiety: Double = foodNeeded
    open val foodValue: Double = 0.0  // –î–æ–±–∞–≤–ª–µ–Ω–æ foodValue –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    abstract fun eat(cell: Cell)
    abstract fun move(island: Island, currentPosition: Pair<Int, Int>)  // –£–∫–∞–∑–∞–Ω—ã —Ç–∏–ø—ã Pair
    abstract fun reproduce(cell: Cell)

    fun die(cell: Cell) {
        cell.removeAnimal(this)
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ö–∏—â–Ω–∏–∫–æ–≤
abstract class Predator(symbol: String, maxCountPerCell: Int, speed: Int, foodNeeded: Double) : Animal(symbol, maxCountPerCell, speed, foodNeeded)

// –ö–ª–∞—Å—Å –¥–ª—è —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö
abstract class Herbivore(symbol: String, maxCountPerCell: Int, speed: Int, foodNeeded: Double) : Animal(symbol, maxCountPerCell, speed, foodNeeded)

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö
class Wolf : Predator("üê∫", 30, 3, 8.0) {
    override val foodValue: Double = 8.0  // –î–æ–±–∞–≤–ª–µ–Ω–æ foodValue –¥–ª—è –≤–æ–ª–∫–∞

    override fun eat(cell: Cell) {
        // –ò—â–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ø–∞–≤—à—É—é—Å—è –∂–µ—Ä—Ç–≤—É, —á—Ç–æ–±—ã –Ω–µ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –≤—Å–µ–º—É —Å–ø–∏—Å–∫—É, –µ—Å–ª–∏ –Ω–∞—à–ª–∏
        val rabbit = cell.herbivores.firstOrNull { it is Rabbit } as? Rabbit // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
        if (rabbit != null && Random.nextInt(100) < 60) {
            satiety = min(satiety + rabbit.foodValue, foodNeeded) // –ß—Ç–æ–±—ã –Ω–µ "–ø–µ—Ä–µ–µ–¥–∞–ª"
            cell.removeAnimal(rabbit)
        }
    }

    override fun move(island: Island, currentPosition: Pair<Int, Int>) {
        repeat(speed) {
            val direction = Direction.random()
            val newPosition = island.getValidPosition(currentPosition, direction)
            island.moveAnimal(this, currentPosition, newPosition)
        }
        satiety = max(0.0, satiety - foodNeeded * 0.1 * speed) // –ß—Ç–æ–±—ã –Ω–µ —Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
    }

    override fun reproduce(cell: Cell) {
        if (cell.predators.count { it is Wolf } >= 2 && Random.nextInt(100) < 15 && cell.predators.size < maxCountPerCell) {
            cell.addPredator(Wolf())
        }
    }
}

class Rabbit : Herbivore("üêá", 150, 2, 0.45) {
    override val foodValue: Double = 0.45

    override fun eat(cell: Cell) {
        val plantsToEat = min(cell.plants.toDouble(), foodNeeded - satiety)  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Double –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        satiety = min(satiety + plantsToEat, foodNeeded) // –ß—Ç–æ–±—ã –Ω–µ "–ø–µ—Ä–µ–µ–¥–∞–ª"
        cell.plants -= plantsToEat.toInt() // –í–æ–∑–≤—Ä–∞—Ç –∫ Int
    }

    override fun move(island: Island, currentPosition: Pair<Int, Int>) {
        repeat(speed) {
            val direction = Direction.random()
            val newPosition = island.getValidPosition(currentPosition, direction)
            island.moveAnimal(this, currentPosition, newPosition)
        }
        satiety = max(0.0, satiety - foodNeeded * 0.1 * speed) // –ß—Ç–æ–±—ã –Ω–µ —Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
    }

    override fun reproduce(cell: Cell) {
        if (cell.herbivores.count { it is Rabbit } >= 2 && Random.nextInt(100) < 15 && cell.herbivores.size < maxCountPerCell) {
            cell.addHerbivore(Rabbit())
        }
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è –∫–ª–µ—Ç–∫–∏
data class Cell(
    var plants: Int = 0,
    val predators: MutableList<Predator> = mutableListOf(), // –£–∫–∞–∑–∞–Ω —Ç–∏–ø —Å–ø–∏—Å–∫–∞
    val herbivores: MutableList<Herbivore> = mutableListOf() // –£–∫–∞–∑–∞–Ω —Ç–∏–ø —Å–ø–∏—Å–∫–∞
)

{
    fun removeAnimal(animal: Animal) {
        when (animal) {
            is Predator -> predators.remove(animal)
            is Herbivore -> herbivores.remove(animal)
        }
    }

    fun addPredator(predator: Predator) {
        if (predators.size < predator.maxCountPerCell) {
            predators.add(predator)
        }
    }

    fun addHerbivore(herbivore: Herbivore) {
        if (herbivores.size < herbivore.maxCountPerCell) {
            herbivores.add(herbivore)
        }
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è –æ—Å—Ç—Ä–æ–≤–∞
class Island(val width: Int, val height: Int) {
    val cells = Array(height) { Array(width) { Cell() } }
    private val scheduledPool = ScheduledThreadPoolExecutor(1) // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
    private val taskPool = ForkJoinPool.commonPool() // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å commonPool

    fun initialize() {
        for (y in 0 until height) {
            for (x in 0 until width) {
                cells[y][x].plants = Random.nextInt(101)
                if (Random.nextDouble() < 0.1) cells[y][x].addPredator(Wolf()) // –£–ª—É—á—à–µ–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                if (Random.nextDouble() < 0.2) cells[y][x].addHerbivore(Rabbit()) // –£–ª—É—á—à–µ–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            }
        }
    }

    fun growPlants() {
        processCells { cell ->
            if (cell.plants < 200) {
                cell.plants = min(200, cell.plants + Random.nextInt(1, 10))  // –†–æ—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π —Å–ª—É—á–∞–π–Ω—ã–π, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 200
            }
        }
    }

    fun processCells(action: (Cell) -> Unit) {
        for (y in 0 until height) {
            for (x in 0 until width) {
                action(cells[y][x])
            }
        }
    }

    fun getValidPosition(position: Pair<Int, Int>, direction: Direction): Pair<Int, Int> {
        var (x, y) = position
        when (direction) {
            Direction.UP -> y = (y - 1).coerceAtLeast(0)
            Direction.DOWN -> y = (y + 1).coerceAtMost(height - 1)
            Direction.LEFT -> x = (x - 1).coerceAtLeast(0)
            Direction.RIGHT -> x = (x + 1).coerceAtMost(width - 1)
        }
        return Pair(x, y)
    }

    fun moveAnimal(animal: Animal, from: Pair<Int, Int>, to: Pair<Int, Int>) {
        if (from == to) return // –ñ–∏–≤–æ—Ç–Ω–æ–µ –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è
        val fromCell = cells[from.second][from.first]
        val toCell = cells[to.second][to.first]
        synchronized(fromCell) {
            synchronized(toCell) {
                when (animal) {
                    is Predator -> {
                        if (fromCell.predators.remove(animal)) { // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª–∏–ª–∏
                            if (toCell.predators.size < animal.maxCountPerCell) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                                toCell.addPredator(animal)
                            } else {
                                fromCell.addPredator(animal) // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                            }
                        }
                    }
                    is Herbivore -> {
                        if (fromCell.herbivores.remove(animal)) {
                            if (toCell.herbivores.size < animal.maxCountPerCell) {
                                toCell.addHerbivore(animal)
                            } else {
                                fromCell.addHerbivore(animal) // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                            }
                        }
                    }
                }
            }
        }
    }

    fun startSimulation() {
        scheduledPool.scheduleAtFixedRate({
            taskPool.execute { // Use execute instead of submit for fire-and-forget
                try {
                    growPlants()
                    processCells { cell ->
                        cell.predators.forEach { it.eat(cell) }
                        cell.herbivores.forEach { it.eat(cell) }
                    }
                    processCells { cell ->
                        //–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —è—á–µ–π–∫–∏
                        val x = cells.indexOfFirst { it.contains(cell) }
                        val y = cells[x].indexOf(cell)
                        cell.predators.forEach { it.move(this, Pair(y,x)) }
                        cell.herbivores.forEach { it.move(this, Pair(y,x)) }
                    }
                    processCells { cell ->
                        cell.predators.removeIf { it.satiety <= 0 } // –£–¥–∞–ª–µ–Ω–∏–µ —É–º–µ—Ä—à–∏—Ö —Ö–∏—â–Ω–∏–∫–æ–≤
                        cell.herbivores.removeIf { it.satiety <= 0 } // –£–¥–∞–ª–µ–Ω–∏–µ —É–º–µ—Ä—à–∏—Ö —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö
                    }
                    processCells { cell ->
                        cell.predators.forEach { it.reproduce(cell) }
                        cell.herbivores.forEach { it.reproduce(cell) }
                    }
                } catch (e: Exception) {
                    println("Exception during simulation step: ${e.message}")
                    e.printStackTrace()  // –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
                }
            }
        }, 0, 1, TimeUnit.SECONDS)
    }

    fun stopSimulation() {
        scheduledPool.shutdown()
        taskPool.shutdown()
        scheduledPool.awaitTermination(5, TimeUnit.SECONDS) // –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        taskPool.awaitTermination(5, TimeUnit.SECONDS) // –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    }

    fun render() {
        print("\u001B[H\u001B[2J")
        cells.forEach { row ->
            row.forEach { cell ->
                val displaySymbol = when {
                    cell.plants > 0 -> "\u001B[32müåø\u001B[0m"
                    cell.predators.isNotEmpty() -> cell.predators.first().symbol
                    cell.herbivores.isNotEmpty() -> cell.herbivores.first().symbol
                    else -> "\u001B[33m‚ñë\u001B[0m"
                }
                print(displaySymbol)
            }
            println()
        }
    }
}

// –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
enum class Direction {
    UP, DOWN, LEFT, RIGHT;

    companion object {
        fun random(): Direction {
            return values()[Random.nextInt(values().size)]
        }
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
fun main() {
    val island = Island(100, 20)
    island.initialize()
    island.startSimulation()

    while (true) {
        Thread.sleep(1000)
        island.render()
    }
}